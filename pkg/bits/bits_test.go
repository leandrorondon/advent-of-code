package bits

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestNew(t *testing.T) {
	tests := []struct {
		name string
		size int
		want int
	}{
		{
			name: "4 bits",
			size: 4,
			want: 1,
		},
		{
			name: "8 bits",
			size: 8,
			want: 1,
		},
		{
			name: "32 bits",
			size: 32,
			want: 1,
		},
		{
			name: "64 bits",
			size: 64,
			want: 1,
		},
		{
			name: "128 bits",
			size: 128,
			want: 2,
		},
		{
			name: "1024 bits",
			size: 1024,
			want: 16,
		},
		{
			name: "1048 bits",
			size: 1048,
			want: 17,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			b := New(tt.size)
			assert.NotNil(t, b)
			assert.Len(t, b.bits, tt.want)
		})
	}
}

func TestNew_Error(t *testing.T) {
	assert.PanicsWithValue(t,
		"invalid size",
		func() {
			New(0)
		},
	)
}

func TestNewFromString(t *testing.T) {
	tests := []struct {
		name string
		str  string
		want int
	}{
		{
			name: "4 bits",
			str:  "0000",
			want: 1,
		},
		{
			name: "8 bits",
			str:  "10101010",
			want: 1,
		},
		{
			name: "32 bits",
			str:  "10101010101010101010101010101010",
			want: 1,
		},
		{
			name: "64 bits",
			str:  "1010101010101010101010101010101010101010101010101010101010101010",
			want: 1,
		},
		{
			name: "128 bits",
			str:  "10101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010",
			want: 2,
		},
		{
			name: "1024 bits",
			str
			want: 16,
		},
		{
			name: "1048 bits",
			str
			want: 17,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			b := NewFromString(tt.str)
			assert.NotNil(t, b)
			assert.Len(t, b.bits, tt.want)
		})
	}
}

func TestNewFromString_Error(t *testing.T) {
	assert.PanicsWithValue(t,
		"unexpected binary string",
		func() {
			NewFromString("1012")
		},
	)
}

func TestSize(t *testing.T) {
	tests := []struct {
		name string
		str  string
		want int
	}{
		{
			name: "8 bits",
			str:  "10101010",
			want: 8,
		},
		{
			name: "8 bits, starting 0",
			str:  "00001111",
			want: 8,
		},
		{
			name: "32 bits",
			str:  "10101010101010101010101010101010",
			want: 32,
		},
		{
			name: "64 bits",
			str:  "1010101010101010101010101010101010101010101010101010101010101010",
			want: 64,
		},
		{
			name: "128 bits",
			str:  "10101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010",
			want: 128,
		},
		{
			name: "128 bits, starting 0",
			str:  "00000000000000000000000000000000000000000000000000000000000000001010101010101010101010101010101010101010101010101010101010101010",
			want: 128,
		},
		{
			name: "1024 bits",
			str
			want: 1024,
		},
		{
			name: "1048 bits",
			str
			want: 1048,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			b := NewFromString(tt.str)
			assert.NotNil(t, b)
			assert.Equal(t, tt.want, b.Size())
		})
	}
}

func TestString(t *testing.T) {
	tests := []struct {
		name string
		str  string
	}{
		{
			name: "4 bits",
			str:  "1111",
		},
		{
			name: "8 bits",
			str:  "10101010",
		},
		{
			name: "8 bits, starting 0",
			str:  "00001111",
		},
		{
			name: "32 bits",
			str:  "10101010101010101010101010101010",
		},
		{
			name: "64 bits",
			str:  "1010101010101010101010101010101010101010101010101010101010101010",
		},
		{
			name: "128 bits",
			str:  "10101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010",
		},
		{
			name: "128 bits, starting 0",
			str:  "00000000000000000000000000000000000000000000000000000000000000001010101010101010101010101010101010101010101010101010101010101010",
		},
		{
			name: "128 bits, ending 0",
			str:  "10101010101010101010101010101010101010101010101010101010101010100000000000000000000000000000000000000000000000000000000000000000",
		},
		{
			name: "1024 bits",
			str
		},
		{
			name: "1048 bits",
			str
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			b := NewFromString(tt.str)
			assert.NotNil(t, b)
			assert.Equal(t, tt.str, b.String())
		})
	}
}

func TestSet(t *testing.T) {
	tests := []struct {
		name string
		size int
		bit  int
		want string
	}{
		{
			name: "4 bits, set bit 0",
			size: 4,
			bit:  0,
			want: "0001",
		},
		{
			name: "4 bits, set bit 1",
			size: 4,
			bit:  1,
			want: "0010",
		},
		{
			name: "4 bits, set bit 2",
			size: 4,
			bit:  2,
			want: "0100",
		},
		{
			name: "4 bits, set bit 3",
			size: 4,
			bit:  3,
			want: "1000",
		},
		{
			name: "64 bits, set bit 0",
			size: 64,
			bit:  0,
			want: "0000000000000000000000000000000000000000000000000000000000000001",
		},
		{
			name: "64 bits, set bit 32",
			size: 64,
			bit:  32,
			want: "0000000000000000000000000000000100000000000000000000000000000000",
		},
		{
			name: "64 bits, set bit 63",
			size: 64,
			bit:  63,
			want: "1000000000000000000000000000000000000000000000000000000000000000",
		},
		{
			name: "128 bits, set bit 0",
			size: 128,
			bit:  0,
			want: "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
		},
		{
			name: "128 bits, set bit 32",
			size: 128,
			bit:  32,
			want: "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000",
		},
		{
			name: "128 bits, set bit 63",
			size: 128,
			bit:  63,
			want: "00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000",
		},
		{
			name: "128 bits, set bit 64",
			size: 128,
			bit:  64,
			want: "00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000",
		},
		{
			name: "128 bits, set bit 127",
			size: 128,
			bit:  127,
			want: "10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			b := New(tt.size)
			b.Set(tt.bit)
			assert.Equal(t, tt.want, b.String())
		})
	}
}

func TestClear(t *testing.T) {
	tests := []struct {
		name  string
		start string
		bit   int
		want  string
	}{
		{
			name:  "4 bits, clear bit 0",
			start: "1111",
			bit:   0,
			want:  "1110",
		},
		{
			name:  "4 bits, clear bit 1",
			start: "1111",
			bit:   1,
			want:  "1101",
		},
		{
			name:  "4 bits, clear bit 2",
			start: "1111",
			bit:   2,
			want:  "1011",
		},
		{
			name:  "4 bits, clear bit 3",
			start: "1111",
			bit:   3,
			want:  "0111",
		},
		{
			name:  "64 bits, clear bit 0",
			start: "1111111111111111111111111111111111111111111111111111111111111111",
			bit:   0,
			want:  "1111111111111111111111111111111111111111111111111111111111111110",
		},
		{
			name:  "64 bits, clear bit 32",
			start: "1111111111111111111111111111111111111111111111111111111111111111",
			bit:   32,
			want:  "1111111111111111111111111111111011111111111111111111111111111111",
		},
		{
			name:  "64 bits, clear bit 63",
			start: "1111111111111111111111111111111111111111111111111111111111111111",
			bit:   63,
			want:  "0111111111111111111111111111111111111111111111111111111111111111",
		},
		{
			name:  "128 bits, clear bit 0",
			start: "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
			bit:   0,
			want:  "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110",
		},
		{
			name:  "128 bits, clear bit 32",
			start: "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
			bit:   32,
			want:  "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111011111111111111111111111111111111",
		},
		{
			name:  "128 bits, clear bit 63",
			start: "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
			bit:   63,
			want:  "11111111111111111111111111111111111111111111111111111111111111110111111111111111111111111111111111111111111111111111111111111111",
		},
		{
			name:  "128 bits, clear bit 64",
			start: "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
			bit:   64,
			want:  "11111111111111111111111111111111111111111111111111111111111111101111111111111111111111111111111111111111111111111111111111111111",
		},
		{
			name:  "128 bits, clear bit 127",
			start: "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
			bit:   127,
			want:  "01111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			b := NewFromString(tt.start)
			b.Clear(tt.bit)
			assert.Equal(t, tt.want, b.String())
		})
	}
}

func TestToggle(t *testing.T) {
	tests := []struct {
		name    string
		start   string
		bit     int
		toggled int
		want    string
	}{
		{
			name:    "4 bits, toggle bit 0",
			start:   "1010",
			bit:     0,
			toggled: 1,
			want:    "1011",
		},
		{
			name:    "4 bits, toggle bit 1",
			start:   "1010",
			bit:     1,
			toggled: 0,
			want:    "1000",
		},
		{
			name:    "4 bits, toggle bit 2",
			start:   "1010",
			bit:     2,
			toggled: 1,
			want:    "1110",
		},
		{
			name:    "4 bits, toggle bit 3",
			start:   "1010",
			bit:     3,
			toggled: 0,
			want:    "0010",
		},
		{
			name:    "64 bits, toggle bit 0",
			start:   "1010101010101010101010101010101010101010101010101010101010101010",
			bit:     0,
			toggled: 1,
			want:    "1010101010101010101010101010101010101010101010101010101010101011",
		},
		{
			name:    "64 bits, toggle bit 32",
			start:   "1010101010101010101010101010101010101010101010101010101010101010",
			bit:     32,
			toggled: 1,
			want:    "1010101010101010101010101010101110101010101010101010101010101010",
		},
		{
			name:    "64 bits, toggle bit 63",
			start:   "1010101010101010101010101010101010101010101010101010101010101010",
			bit:     63,
			toggled: 0,
			want:    "0010101010101010101010101010101010101010101010101010101010101010",
		},
		{
			name:    "128 bits, toggle bit 0",
			start:   "10101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010",
			bit:     0,
			toggled: 1,
			want:    "10101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101011",
		},
		{
			name:    "128 bits, toggle bit 32",
			start:   "10101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010",
			bit:     32,
			toggled: 1,
			want:    "10101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101110101010101010101010101010101010",
		},
		{
			name:    "128 bits, toggle bit 63",
			start:   "10101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010",
			bit:     63,
			toggled: 0,
			want:    "10101010101010101010101010101010101010101010101010101010101010100010101010101010101010101010101010101010101010101010101010101010",
		},
		{
			name:    "128 bits, toggle bit 64",
			start:   "10101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010",
			bit:     64,
			toggled: 1,
			want:    "10101010101010101010101010101010101010101010101010101010101010111010101010101010101010101010101010101010101010101010101010101010",
		},
		{
			name:    "128 bits, toggle bit 127",
			start:   "10101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010",
			bit:     127,
			toggled: 0,
			want:    "00101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010",
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			b := NewFromString(tt.start)
			toggled := b.Toggle(tt.bit)
			assert.Equal(t, tt.toggled, toggled)
			assert.Equal(t, tt.want, b.String())
		})
	}
}

func TestGet(t *testing.T) {
	// Add tests for the Get method
}

func TestBitPos_Error(t *testing.T) {
	b := New(64)
	assert.PanicsWithValue(t,
		"out of range",
		func() { b.bitpos(65) },
	)
	assert.PanicsWithValue(t,
		"out of range",
		func() { b.bitpos(-1) },
	)
}

func TestOnesCount(t *testing.T) {
	tests := []struct {
		name string
		str  string
		want int
	}{
		{
			name: "4 bits",
			str:  "0100",
			want: 1,
		},
		{
			name: "8 bits",
			str:  "10101010",
			want: 4,
		},
		{
			name: "32 bits",
			str:  "10101010101010101010101010101010",
			want: 16,
		},
		{
			name: "64 bits",
			str:  "1010101010101010101010101010101010101010101010101010101010101010",
			want: 32,
		},
		{
			name: "64 bits, 0",
			str:  "0000000000000000000000000000000000000000000000000000000000000000",
			want: 0,
		},
		{
			name: "64 bits, 64",
			str:  "1111111111111111111111111111111111111111111111111111111111111111",
			want: 64,
		},
		{
			name: "128 bits",
			str:  "10101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010",
			want: 64,
		},
		{
			name: "1024 bits",
			str
			want: 512,
		},
		{
			name: "1048 bits",
			str
			want: 524,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			b := NewFromString(tt.str)
			assert.NotNil(t, b)
			assert.Equal(t, tt.want, b.OnesCount())
		})
	}
}
